<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       ">

   <bean id="textParser" class="no.trank.openpipe.parse.text.TextParser">
      <constructor-arg>
         <bean id="textDecoder" class="no.trank.openpipe.parse.text.TextDecoder">
            <constructor-arg index="0">
               <list>
                  <value>UTF-8</value>
                  <value>ISO-8859-1</value>
               </list>
            </constructor-arg>
            <constructor-arg index="1">
               <bean class="com.ibm.icu.text.CharsetDetector"/>
            </constructor-arg>
         </bean>
      </constructor-arg>
   </bean>

   <bean id="parseStep" class="no.trank.openpipe.parse.step.DocumentParser">
      <property name="parsers">
         <map>
            <entry key="doc">
               <bean class="no.trank.openpipe.parse.ms.WordParser"/>
            </entry>
            <entry key="ppt">
               <bean class="no.trank.openpipe.parse.ms.PowerPointParser"/>
            </entry>
            <entry key="xls">
               <bean class="no.trank.openpipe.parse.ms.ExcelParser"/>
            </entry>
            <entry key="xls">
               <bean class="no.trank.openpipe.parse.ms.ExcelParser"/>
            </entry>
            <entry key="odp">
               <bean class="no.trank.openpipe.parse.oo.OOParser"/>
            </entry>
            <entry key="ods">
               <bean class="no.trank.openpipe.parse.oo.OOParser"/>
            </entry>
            <entry key="odt">
               <bean class="no.trank.openpipe.parse.oo.OOParser"/>
            </entry>
            <entry key="pdf">
               <bean class="no.trank.openpipe.parse.pdf.PDFParser"/>
            </entry>
            <entry key="xml">
               <bean class="no.trank.openpipe.parse.xml.XMLParser"/>
            </entry>
            <entry key="txt" value-ref="textParser"/>
            <entry key="csv" value-ref="textParser"/>
         </map>
      </property>
      <property name="textField" value="content"/>
      <property name="titleField" value="title"/>
      <property name="stopOnParseFailure" value="true"/>
   </bean>

   <bean id="solrDocumentPoster" class="no.trank.openpipe.solr.SolrHttpDocumentPoster">
      <property name="postUrl" value="http://localhost:8983/solr/update"/>
      <property name="docsPerPost" value="5"/>
      <!--<property name="docsPerCommit" value="5"/>-->
   </bean>

   <bean id="solrDocumentProcessor" class="no.trank.openpipe.solr.step.SolrDocumentProcessor">
      <property name="documentPoster" ref="solrDocumentPoster"/>
      <property name="solrSchemaUrl" value="http://localhost:8983/solr/admin/get-file.jsp?file=schema.xml"/>
      <property name="excludeInputFields">
         <set>
            <value>path</value>
         </set>
      </property>
      <property name="serializer">
         <bean class="no.trank.openpipe.solr.analysis.Base64TokenSerializer"/>
      </property>
      <property name="tokenizedFields">
         <set>
            <value>title</value>
            <value>content</value>
         </set>
      </property>
   </bean>

   <bean id="solrAnalyzer" class="no.trank.openpipe.solr.step.SolrAnalyzerStep" abstract="true">
      <property name="tokenizerFactory">
         <bean class="org.apache.solr.analysis.WhitespaceTokenizerFactory"/>
      </property>
      <property name="filterFactories">
         <list>
            <bean class="no.trank.openpipe.solr.util.TokenFilterFactoryFactory" factory-method="createFactory">
               <constructor-arg value="org.apache.solr.analysis.WordDelimiterFilterFactory" type="java.lang.String"/>
               <constructor-arg>
                  <map>
                     <entry key="generateWordParts" value="1"/>
                     <entry key="generateNumberParts" value="1"/>
                     <entry key="catenateWords" value="1"/>
                     <entry key="catenateNumbers" value="1"/>
                     <entry key="catenateAll" value="0"/>
                  </map>
               </constructor-arg>
            </bean>
            <bean class="no.trank.openpipe.solr.util.TokenFilterFactoryFactory" factory-method="createFactory">
               <constructor-arg value="org.apache.solr.analysis.LowerCaseFilterFactory" type="java.lang.String"/>
               <constructor-arg>
                  <map/>
               </constructor-arg>
            </bean>
            <bean class="no.trank.openpipe.solr.util.TokenFilterFactoryFactory" factory-method="createFactory">
               <constructor-arg value="org.apache.solr.analysis.RemoveDuplicatesTokenFilterFactory"
                                type="java.lang.String"/>
               <constructor-arg>
                  <map/>
               </constructor-arg>
            </bean>
         </list>
      </property>
   </bean>

   <bean id="pipeline" class="no.trank.openpipe.api.Pipeline">
      <property name="pipelineExceptionHandler">
         <bean class="no.trank.openpipe.api.DefaultPipelineExceptionHandler">
            <property name="exceptionListeners">
               <bean class="no.trank.openpipe.api.LoggingPipelineExceptionListener"/>
            </property>
         </bean>
      </property>
      <property name="pipelineSteps">
         <list>
            <ref bean="parseStep"/>
            <bean class="no.trank.openpipe.step.CopyField">
               <property name="fieldNameMap">
                  <map>
                     <entry key="pathName" value="id"/>
                  </map>
               </property>
               <property name="withAnnotations" value="false"/>
            </bean>
            <bean class="no.trank.openpipe.step.RegexField">
               <property name="fieldNameMap">
                  <map>
                     <entry key="id" value="url"/>
                  </map>
               </property>
               <property name="fromPattern" value="^(.*)$"/>
               <property name="toPattern" value="file://$1"/> 
            </bean>
            <bean class="no.trank.openpipe.step.RegexField">
               <property name="fieldNameMap">
                  <map>
                     <entry key="url" value="url"/>
                  </map>
               </property>
               <property name="fromPattern" value="%"/>
               <property name="toPattern" value="%25"/> 
               <property name="copyOnMiss" value="true"/>
            </bean>
            <bean parent="solrAnalyzer">
               <property name="inputFields">
                  <list>
                     <value>content</value>
                     <value>title</value>
                  </list>
               </property>
            </bean>
            <ref bean="solrDocumentProcessor"/>
         </list>
      </property>
   </bean>

   <bean id="fileDocumentReader" class="no.trank.openpipe.reader.FileDocumentReader">
      <property name="directory" value="."/>
      <property name="maxDepth" value="-1"/>
      <property name="regexPattern" value=".+(\.(doc|txt|od[pst]|pdf|ppt|xls))?"/>
   </bean>

   <bean id="pipelineApplicationBean" class="no.trank.openpipe.api.PipelineRunner">
      <property name="documentReader">
         <ref local="fileDocumentReader"/>
      </property>
      <property name="pipeline">
         <ref local="pipeline"/>
      </property>
   </bean>
</beans>
